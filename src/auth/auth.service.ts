import {
  HttpException,
  HttpStatus,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { CreateUserDto } from 'src/users/dto/create-user-dto';
import { UsersService } from 'src/users/users.service';
import { JwtService } from '@nestjs/jwt';
import { User } from 'src/users/user.model';
import * as bcrypt from 'bcryptjs';
import { LoggingService } from 'src/logging/logging.service';

@Injectable()
export class AuthService {
  constructor(
    private usersService: UsersService,
    private jwtService: JwtService,
    private loggingService: LoggingService,
  ) {}

  // async login(userDto: CreateUserDto) {
  //   const user = await this.validateUser(userDto);

  //   return this.generateToken(user);
  // }

  async login(userDto: CreateUserDto) {
    try {
      const user = await this.validateUser(userDto);
      const token = await this.generateToken(user);

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
      await this.loggingService.userAction(
        user.id,
        'login',
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É`,
        { email: user.email, roles: user.roles.map((role) => role.value) },
      );

      return token;
    } catch (error) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
      await this.loggingService.error(
        `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É —Å email: ${userDto.email}`,
        'AuthService',
        error.stack,
        { errorType: 'AuthError' },
      );
      throw error;
    }
  }

  // private async validateUser(userDto: CreateUserDto) {
  //   const user = await this.usersService.getUserByEmail(userDto.email);
  //   if (!user) {
  //     throw new HttpException(
  //       '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
  //       HttpStatus.BAD_REQUEST,
  //     );
  //   }
  //   const passwordEquals = await bcrypt.compare(
  //     userDto.password,
  //     user.password,
  //   );
  //   if (!passwordEquals) {
  //     throw new UnauthorizedException({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
  //   }

  //   return user;
  // }
  private async validateUser(userDto: CreateUserDto) {
    try {
      const user = await this.usersService.getUserByEmail(userDto.email);
      if (!user) {
        await this.loggingService.warn(
          `–ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: ${userDto.email}`,
          'AuthService',
          { errorType: 'UserNotFound' },
        );
        throw new UnauthorizedException({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        });
      }

      const passwordEquals = await bcrypt.compare(
        userDto.password,
        user.password,
      );
      if (!passwordEquals) {
        await this.loggingService.warn(
          `–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userDto.email}`,
          'AuthService',
          { errorType: 'InvalidPassword' },
          user.id,
        );
        throw new UnauthorizedException({
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
        });
      }

      return user;
    } catch (error) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      if (!(error instanceof UnauthorizedException)) {
        await this.loggingService.error(
          `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
          'AuthService',
          error.stack,
          { email: userDto.email },
        );
      }
      throw error;
    }
  }

  // async registration(userDto: CreateUserDto) {
  //   const candidate = await this.usersService.getUserByEmail(userDto.email);
  //   if (candidate) {
  //     throw new HttpException(
  //       '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
  //       HttpStatus.BAD_REQUEST,
  //     );
  //   }
  //   const hashPassword = await bcrypt.hash(userDto.password, 10);
  //   userDto.password = hashPassword;

  //   const user = await this.usersService.createUser(userDto);
  //   if (!user) {
  //     throw new HttpException('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–∑–¥–∞–Ω', HttpStatus.BAD_REQUEST);
  //   }
  //   return this.generateToken(user);
  // }

  async registration(userDto: CreateUserDto) {
    try {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const candidate = await this.usersService.getUserByEmail(userDto.email);
      if (candidate) {
        await this.loggingService.warn(
          `–ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: ${userDto.email}`,
          'AuthService',
          { errorType: 'UserExists' },
        );
        throw new HttpException(
          '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
          HttpStatus.BAD_REQUEST,
        );
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const hashPassword = await bcrypt.hash(userDto.password, 5);
      const user = await this.usersService.createUser({
        ...userDto,
        password: hashPassword,
      });

      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await this.loggingService.userAction(
        user.id,
        'register',
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.email} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω`,
        { email: user.email },
      );

      return this.generateToken(user);
    } catch (error) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–∞—à–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      if (!(error instanceof HttpException)) {
        await this.loggingService.error(
          `–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`,
          'AuthService',
          error.stack,
          { userData: { email: userDto.email } },
        );
      }
      throw error;
    }
  }
  private generateToken(user: User) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!user.email) {
      console.error('‚ùå –û—à–∏–±–∫–∞: email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      throw new Error('User email is required');
    }

    const payload = {
      email: user.email,
      id: user.id,
      roles: user.roles
        ? user.roles.map((role: any) => role.value || role)
        : [],
    };

    console.log('üîë Payload –¥–ª—è —Ç–æ–∫–µ–Ω–∞:', JSON.stringify(payload, null, 2));

    try {
      const token = this.jwtService.sign(payload);
      console.log('‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      return { token };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞');
    }
  }
}
